version: '3.9'

x-kong-config: &kong-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: kong
  KONG_PG_HOST: kong-database
  KONG_PG_USER: kong
  KONG_PG_PASSWORD: kong

volumes:
  kong-database:

networks:
  kong-net:
    external: false

services:
  # kong-migrations:
  #   image: "${KONG_DOCKER_TAG:-kong:latest}"
  #   command: kong migrations bootstrap
  #   profiles: ["database"]
  #   depends_on:
  #     - db
  #   environment:
  #     <<: *kong-env
  #   secrets:
  #     - kong_postgres_password
  #   networks:
  #     - kong-net
  #   restart: on-failure

  kong-gateway:
    image: kong:3.0.0-alpine
    command: kong migrations bootstrap
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    networks:
      - kong-net
    ports:
      - 8000:8000
      - 8443:8443
      - 127.0.0.1:8001:8001
      - 127.0.0.1:8444:8444
    # healthcheck:
    #   test: ["CMD", "kong", "health"]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 10
    # restart: on-failure:5
    # read_only: true

  kong-database:
    image: postgres:14.4-alpine
    container_name: kong-database
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    ports:
     - 1000:5432
#     healthcheck:
#       test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
#       interval: 10s
#       timeout: 5s
#       retries: 3
    restart: unless-stopped
    networks:
      - kong-net
    volumes:
      - kong-database:/var/lib/postgresql/data